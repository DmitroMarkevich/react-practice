{"version":3,"file":"static/js/485.6c578f67.chunk.js","mappings":"oJAGO,MAAMA,EAAUC,EAAAA,GAAAA,GAAW;;EAIrBC,EAAOD,EAAAA,GAAAA,EAAU;;;EAKjBE,GAAaF,EAAAA,EAAAA,IAAOG,EAAAA,GAAM;;;;;;;wBCRhC,MAAMC,EAAaC,IAAe,IAAd,OAACC,GAAOD,EACjC,MAAME,GAAWC,EAAAA,EAAAA,MAEjB,OACEC,EAAAA,EAAAA,KAACV,EAAO,CAAAW,UACND,EAAAA,EAAAA,KAAA,MAAAC,SACGJ,EAAOK,KAAIC,IACVH,EAAAA,EAAAA,KAACR,EAAI,CAAAS,UACHD,EAAAA,EAAAA,KAACP,EAAU,CAACW,GAAK,WAAUD,EAAME,KAAMC,MAAO,CAACC,KAAMT,GAAUG,SAAEE,EAAMK,SAD9DL,EAAME,SAKb,C,sFCdP,MAAMI,EAAYlB,EAAAA,GAAAA,GAAW;;EAIvBmB,EAAQnB,EAAAA,GAAAA,EAAU;;;;wBCA/B,MA6BA,EA7BaoB,KACX,MAAOd,EAAQe,IAAaC,EAAAA,EAAAA,UAAS,KAC9BC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,GAkBvC,OAhBAG,EAAAA,EAAAA,YAAU,KACUC,WAChBF,GAAW,GACX,IACE,MAAMG,QAAiBC,EAAAA,EAAAA,MACvBP,EAAUM,EAASE,QAKrB,CAJE,MAAOC,GACPC,QAAQC,IAAIF,EACd,CAAC,QACCN,GAAW,EACb,GAGFS,EAAW,GACV,KAGDC,EAAAA,EAAAA,MAAChB,EAAS,CAAAR,SAAA,CACPa,IAAWd,EAAAA,EAAAA,KAAC0B,EAAAA,EAAM,KACnB1B,EAAAA,EAAAA,KAACU,EAAK,CAAAT,SAAC,qBACPD,EAAAA,EAAAA,KAACL,EAAAA,EAAU,CAACE,OAAQA,MACV,C,sEC/BT,MCGD8B,E,OAAgBC,EAAAA,OAAa,CACjCC,QDJsB,+BCKtBC,OAAQ,CACNC,QDLmB,oCCOrBC,QAAS,MAGLR,EAAYP,eAAOgB,GAAuB,IAAlBC,EAAOC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACvC,IACE,aAAcR,EAAcW,IAAIL,EAAKC,IAAUK,IASjD,CARE,MAAOlB,GACP,OAAIA,EAAMH,SACDsB,QAAQC,OAAO,IAAIC,MAAO,uBAAsBrB,EAAMH,SAASyB,WAC7DtB,EAAMuB,QACRJ,QAAQC,OAAO,IAAIC,MAAM,0CAEzBF,QAAQC,OAAO,IAAIC,MAAMrB,EAAMwB,SAAW,0CAErD,CACF,EAEa1B,EAAcA,IAClBK,EAAU,uBAGNsB,EAAmBC,GACzBA,EAIEvB,EAAW,UAASuB,KAHlBP,QAAQC,OAAO,IAAIC,MAAM,yBAMvBM,EAAYA,CAACC,EAAWC,IAC9BD,EAIEzB,EAAU,gBAAiB,CAChCM,OAAQ,CACNqB,MAAOF,EACPC,KAAMA,KANDV,QAAQC,OAAO,IAAIC,MAAM,2BAWvBU,EAAUA,CAACL,EAASG,IAC1BH,EAIEvB,EAAW,UAASuB,YAAmB,CAC5CjB,OAAQ,CACNoB,KAAMA,KALDV,QAAQC,OAAO,IAAIC,MAAM,yBAUvBW,EAAaA,CAACN,EAASG,IAC7BH,EAIEvB,EAAW,UAASuB,YAAmB,CAC5CjB,OAAQ,CACNoB,KAAMA,KALDV,QAAQC,OAAO,IAAIC,MAAM,wB","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","pages/Home/Home.styled.jsx","pages/Home/Home.jsx","config.js","services.js"],"sourcesContent":["import styled from \"styled-components\";\nimport {Link} from \"react-router-dom\";\n\nexport const Wrapper = styled.div`\n  padding: 1rem;\n`;\n\nexport const Item = styled.li`\n  margin-bottom: 0.5rem;\n  list-style-type: circle;\n`;\n\nexport const StyledLink = styled(Link)`\n  text-decoration: none;\n  color: #007bff;\n\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n","import PropTypes from \"prop-types\";\nimport {Wrapper, Item, StyledLink} from \"./MoviesList.styled\";\nimport {useLocation} from \"react-router-dom\";\n\nexport const MoviesList = ({movies}) => {\n  const location = useLocation();\n\n  return (\n    <Wrapper>\n      <ul>\n        {movies.map(movie => (\n          <Item key={movie.id}>\n            <StyledLink to={`/movies/${movie.id}`} state={{from: location}}>{movie.title}</StyledLink>\n          </Item>\n        ))}\n      </ul>\n    </Wrapper>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  padding: 2rem;\n`;\n\nexport const Title = styled.h1`\n  font-size: 2.5rem;\n  color: #343a40;\n  margin-bottom: 1.5rem;\n`;\n","import {useEffect, useState} from \"react\";\nimport {getTrending} from \"../../services\";\nimport {MoviesList} from \"../../components/MoviesList/MoviesList\";\nimport {Container, Title} from \"./Home.styled\";\nimport Loader from \"../../components/Loader/Loader\";\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const response = await getTrending();\n        setMovies(response.results);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <Container>\n      {loading && <Loader/>}\n      <Title>Trending Movies</Title>\n      <MoviesList movies={movies}/>\n    </Container>\n  );\n}\n\nexport default Home;\n","export const BASE_URL = 'https://api.themoviedb.org/3'\nexport const API_KEY = '46524a805b39690e1dbf4f8ffae20232'\n","import axios from 'axios';\nimport {BASE_URL, API_KEY} from './config';\n\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL,\n  params: {\n    api_key: API_KEY,\n  },\n  timeout: 10000,\n});\n\nconst fetchData = async (url, options = {}) => {\n  try {\n    return (await axiosInstance.get(url, options)).data;\n  } catch (error) {\n    if (error.response) {\n      return Promise.reject(new Error(`HTTP error! status: ${error.response.status}`));\n    } else if (error.request) {\n      return Promise.reject(new Error('No response received from the server.'));\n    } else {\n      return Promise.reject(new Error(error.message || 'An error occurred while fetching data.'));\n    }\n  }\n};\n\nexport const getTrending = () => {\n  return fetchData('/trending/movie/day');\n};\n\nexport const getMovieDetails = (movieId) => {\n  if (!movieId) {\n    return Promise.reject(new Error('Movie ID is required'));\n  }\n\n  return fetchData(`/movie/${movieId}`);\n};\n\nexport const getMovies = (movieName, page) => {\n  if (!movieName) {\n    return Promise.reject(new Error('Movie name is required'));\n  }\n\n  return fetchData('/search/movie', {\n    params: {\n      query: movieName,\n      page: page\n    },\n  });\n}\n\nexport const getCast = (movieId, page) => {\n  if (!movieId) {\n    return Promise.reject(new Error('Movie ID is required'));\n  }\n\n  return fetchData(`/movie/${movieId}/credits`, {\n    params: {\n      page: page\n    }\n  });\n};\n\nexport const getReviews = (movieId, page) => {\n  if (!movieId) {\n    return Promise.reject(new Error('Movie ID is required'));\n  }\n\n  return fetchData(`/movie/${movieId}/reviews`, {\n    params: {\n      page: page\n    }\n  });\n};\n"],"names":["Wrapper","styled","Item","StyledLink","Link","MoviesList","_ref","movies","location","useLocation","_jsx","children","map","movie","to","id","state","from","title","Container","Title","Home","setMovies","useState","loading","setLoading","useEffect","async","response","getTrending","results","error","console","log","fetchData","_jsxs","Loader","axiosInstance","axios","baseURL","params","api_key","timeout","url","options","arguments","length","undefined","get","data","Promise","reject","Error","status","request","message","getMovieDetails","movieId","getMovies","movieName","page","query","getCast","getReviews"],"sourceRoot":""}