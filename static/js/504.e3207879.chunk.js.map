{"version":3,"file":"static/js/504.e3207879.chunk.js","mappings":"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","sources":["components/Cast/List/CastsList.styled.jsx","components/Cast/List/CastsList.jsx","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","config.js","services.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  padding: 20px;\n  background-color: #f9f9f9;\n`;\n\nexport const List = styled.ul`\n  list-style-type: none;\n  padding: 0;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  align-items: center;\n  margin-bottom: 15px;\n  border-bottom: 1px solid #ddd;\n  padding-bottom: 15px;\n`;\n\nexport const Img = styled.img`\n  border-radius: 50%;\n  margin-right: 10px;\n`;\n\nexport const Name = styled.p`\n  margin: 0;\n  font-weight: 700;\n  color: var(--text-primary);\n`;\n\nexport const Character = styled.p`\n  margin: 0;\n  color: #555;\n`;\n","import PropTypes from \"prop-types\";\nimport {Character, Img, ListItem, Name, Wrapper, List} from \"./CastsList.styled\";\n\nconst CastsList = ({casts}) => {\n  return (\n    <Wrapper>\n      <List>\n        {casts.map(({id, profile_path, name, character}) => (\n          <ListItem key={id}>\n            <Img\n              src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n              alt={`${name} photo`}\n              width='70'\n            />\n            <div>\n              <Name>{name}</Name>\n              <Character>Character: {character}</Character>\n            </div>\n          </ListItem>\n        ))}\n      </List>\n    </Wrapper>\n  );\n}\n\nCastsList.propTypes = {\n  casts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    profile_path: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    character: PropTypes.string.isRequired,\n  })).isRequired,\n};\n\nexport default CastsList;\n","import styled from 'styled-components';\n\nexport const Title = styled.h2`\n  font-size: 1.5rem;\n  color: var(--text-primary);\n  margin-bottom: var(--spacing-medium);\n`;\n\nexport const NoCastInfo = styled.p`\n  font-style: italic;\n  color: var(--text-secondary);\n`;\n","import {useEffect, useState} from \"react\";\nimport {useParams} from \"react-router-dom\";\nimport {getCast} from \"../../services\";\nimport Loader from \"../Loader/Loader\";\nimport CastsList from \"./List/CastsList\";\nimport Error from \"../Error/Error\";\nimport {NoCastInfo, Title} from \"./Cast.styled\";\nimport {Pagination} from \"antd\";\n\nconst CASTS_PER_PAGE = 7;\n\nconst Cast = () => {\n  const {movieId} = useParams();\n  const [casts, setCasts] = useState([]);\n  const [displayedCasts, setDisplayedCasts] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [page, setPage] = useState(1);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      setLoading(true);\n      try {\n        const response = await getCast(Number(movieId));\n        const castData = response.cast;\n        setCasts(castData);\n        setDisplayedCasts(castData.slice(0, CASTS_PER_PAGE));\n      } catch (error) {\n        setError('Failed to load cast information.');\n        console.error(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n  useEffect(() => {\n    const start = (page - 1) * CASTS_PER_PAGE;\n    const end = start + CASTS_PER_PAGE;\n    setDisplayedCasts(casts.slice(start, end));\n  }, [page, casts]);\n\n  const handlePageChange = (page) => {\n    setPage(page);\n  };\n\n  if (error) {\n    return <Error errorDetails={error}/>;\n  }\n\n  return (\n    <div>\n      {loading && <Loader/>}\n      <Title>Cast Information</Title>\n      <CastsList casts={displayedCasts}/>\n\n      {casts.length > 0 ? (\n        <Pagination\n          current={page}\n          pageSize={CASTS_PER_PAGE}\n          total={casts.length}\n          onChange={handlePageChange}\n          showSizeChanger={false}\n        />\n      ) : (\n        <NoCastInfo>No cast information available.</NoCastInfo>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n","export const BASE_URL = process.env.REACT_APP_BASE_URL;\nexport const API_KEY = process.env.REACT_APP_API_KEY;\n","import axios from 'axios';\nimport {BASE_URL, API_KEY} from './config';\n\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL,\n  params: {\n    api_key: API_KEY,\n  },\n  timeout: 10000,\n});\n\nconst fetchData = async (url, options = {}) => {\n  try {\n    return (await axiosInstance.get(url, options)).data;\n  } catch (error) {\n    if (error.response) {\n      return Promise.reject(new Error(`HTTP error! status: ${error.response.status}`));\n    } else if (error.request) {\n      return Promise.reject(new Error('No response received from the server.'));\n    } else {\n      return Promise.reject(new Error(error.message || 'An error occurred while fetching data.'));\n    }\n  }\n};\n\nexport const getTrending = () => {\n  return fetchData('/trending/movie/day');\n};\n\nexport const getMovieDetails = (movieId) => {\n  if (!movieId) {\n    return Promise.reject(new Error('Movie ID is required'));\n  }\n\n  return fetchData(`/movie/${movieId}`);\n};\n\nexport const getMovies = (movieName, page) => {\n  if (!movieName) {\n    return Promise.reject(new Error('Movie name is required'));\n  }\n\n  return fetchData('/search/movie', {\n    params: {\n      query: movieName,\n      page: page\n    },\n  });\n}\n\nexport const getCast = (movieId, page) => {\n  if (!movieId) {\n    return Promise.reject(new Error('Movie ID is required'));\n  }\n\n  return fetchData(`/movie/${movieId}/credits`, {\n    params: {\n      page: page\n    }\n  });\n};\n\nexport const getReviews = (movieId, page) => {\n  if (!movieId) {\n    return Promise.reject(new Error('Movie ID is required'));\n  }\n\n  return fetchData(`/movie/${movieId}/reviews`, {\n    params: {\n      page: page\n    }\n  });\n};\n"],"names":["Wrapper","styled","List","ListItem","Img","Name","Character","_ref","casts","_jsx","children","map","_ref2","id","profile_path","name","character","_jsxs","src","alt","width","Title","NoCastInfo","Cast","movieId","useParams","setCasts","useState","displayedCasts","setDisplayedCasts","error","setError","loading","setLoading","page","setPage","useEffect","async","castData","getCast","Number","cast","slice","console","fetchCast","start","end","Error","errorDetails","Loader","CastsList","length","Pagination","current","pageSize","total","onChange","showSizeChanger","BASE_URL","process","REACT_APP_BASE_URL","API_KEY","REACT_APP_API_KEY","axiosInstance","axios","baseURL","params","api_key","timeout","fetchData","url","options","arguments","undefined","get","data","response","Promise","reject","status","request","message","getTrending","getMovieDetails","getMovies","movieName","query","getReviews"],"sourceRoot":""}